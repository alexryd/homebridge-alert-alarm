#!/usr/bin/env node

const AlertAlarmApi = require('../api')
const colors = require('colors/safe')
const NodeRSA = require('node-rsa')
const prompt = require('prompt')
const PushReceiver = require('push-receiver')

const GCM_SENDER_ID = '162191237030'

const api = new AlertAlarmApi()

const promptForSystemIdAndPhoneNumber = settings => {
  return new Promise((resolve, reject) => {
    prompt.get(
      {
        properties: {
          systemId: {
            description: 'System ID',
            pattern: /^[0-9]+$/,
            message: 'System ID must be a number',
            required: true,
          },
          phoneNumber: {
            description: 'Phone number',
            pattern: /^[0-9]+$/,
            message: 'Phone number must be a number',
            required: true,
          },
        }
      },
      (err, res) => {
        if (err) {
          reject(err)
        } else {
          settings.systemId = res.systemId
          settings.phoneNumber = res.phoneNumber

          resolve(settings)
        }
      }
    )
  })
}

const authenticate = settings => {
  console.log('Sending authenticate request...')

  return api.post('/system/auth')
    .type('form')
    .send({
      system_id: settings.systemId,
      phone_number: settings.phoneNumber,
      language: 'sv',
    })
    .then(res => {
      console.log(colors.green('Authentication succeeded'))
      return settings
    })
}

const promptForCode = settings => {
  return new Promise((resolve, reject) => {
    prompt.get(
      {
        properties: {
          code: {
            description: 'Code',
            pattern: /^[0-9]+$/,
            message: 'Code must be a number',
            required: true,
          }
        }
      },
      (err, res) => {
        if (err) {
          reject(err)
        } else {
          settings.code = res.code

          resolve(settings)
        }
      }
    )
  })
}

const verify = settings => {
  console.log('Generating key...')

  const key = new NodeRSA().generateKeyPair()
  key.setOptions({ encryptionScheme: 'pkcs1' })

  const encodedKey = Buffer.from(key.exportKey('pkcs8-public')).toString('base64')

  console.log('Verifying code...')

  return api.post('/system/verify')
    .type('form')
    .send({
      system_id: settings.systemId,
      phone_number: settings.phoneNumber,
      code: settings.code,
      key: encodedKey,
    })
    .then(res => {
      console.log(colors.green('Code successfully verified'))

      const data = JSON.parse(key.decrypt(res.body.data).toString('ascii'))

      settings.clientId = data.clientId
      settings.userId = data.userId
      settings.isMaster = data.isMaster
      settings.publicKey = key.exportKey('public')
      settings.privateKey = key.exportKey('private')

      api.config = {
        systemId: settings.systemId,
        clientId: settings.clientId,
        privateKey: settings.privateKey,
      }

      return settings
    })
}

const loadSystemInfo = settings => {
  console.log('Loading system info...')

  return api.get('/system/info')
    .then(res => {
      console.log(colors.green('System info loaded'))

      const data = res.body.data

      settings.msisdn = data.msisdn
      settings.systemUserId = data.system_user_id

      return settings
    })
}

const promptForPinCode = settings => {
  return new Promise((resolve, reject) => {
    prompt.get(
      {
        properties: {
          pinCode: {
            description: 'PIN code',
            pattern: /^[0-9]{4}$/,
            message: 'PIN code must be a 4 digit number',
            required: true,
          }
        }
      },
      (err, res) => {
        if (err) {
          reject(err)
        } else {
          settings.pinCode = res.pinCode

          resolve(settings)
        }
      }
    )
  })
}

const registerToGCM = settings => {
  console.log('Registering to GCM...')

  return PushReceiver.register(GCM_SENDER_ID)
    .then(credentials => {
      console.log(colors.green('Successfully registered to GCM'))

      settings.pushReceiverCredentials = credentials

      return settings
    })
}

const registerForNotifications = settings => {
  console.log('Registering for notifications...')

  return api.post('/notifications')
    .type('form')
    .send({
      notification_types: 'alarm,activation,temperature',
      os: 'android',
      token: settings.pushReceiverCredentials.gcm.token,
    })
    .then(res => {
      console.log(colors.green('Registered for notifications'))
      return settings
    })
}

const outputConfig = settings => {
  const config = {
    platform: "AlertAlarm",
    name: "Alert Alarm",
    refreshInterval: 10 * 60 * 1000,
    systemId: settings.systemId,
    clientId: settings.clientId,
    systemUserId: settings.systemUserId,
    msisdn: settings.msisdn,
    pinCode: settings.pinCode,
    privateKey: settings.privateKey,
    pushReceiverCredentials: settings.pushReceiverCredentials,
  }

  console.log('')
  console.log(colors.yellow('Copy and paste the JSON data below into your Homebridge config file:'))
  console.log('')
  console.log(JSON.stringify(config, null, 2))
}

prompt.start()

promptForSystemIdAndPhoneNumber({})
  .then(authenticate)
  .then(promptForCode)
  .then(verify)
  .then(loadSystemInfo)
  .then(promptForPinCode)
  .then(registerToGCM)
  .then(registerForNotifications)
  .then(outputConfig)
  .catch(err => {
    console.error(colors.red('An error occurred'), err)
    process.exit(1)
  })
